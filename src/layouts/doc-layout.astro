---
import { getCollection } from 'astro:content'
import { css } from 'styled-system/css'

import { siteConfig } from '@/config/site'
import Sidebar from '@/components/sidebar.astro'
import ContentContainer from '@/components/content-container.astro'
import Layout from '@/layouts/layout.astro'
import NavigationFooter from '@/components/navigation-footer.astro'
import Badge from '@/components/badge.astro'
import type { z } from 'astro:content'
import { docSchema } from '@/content/config'
import type { MarkdownHeading } from 'astro'

interface Props {
  frontmatter: z.infer<typeof docSchema>
  headings: MarkdownHeading[]
}

const docs = await getCollection('docs')
const components = await getCollection('components')

const sortedDocs = docs.sort((a, b) => {
  if (a.data.order && b.data.order) {
    return a.data.order - b.data.order
  }
  return 0
})
const entries = [...sortedDocs, ...components].map((entry) => ({
  root: entry.collection,
  slug: entry.slug,
  title: entry.data.title,
}))

const { frontmatter, headings } = Astro.props
const { title, description, badges } = frontmatter
---

<Layout title={`${siteConfig.name} - ${title}`}>
  <div
    class={css({
      display: 'grid',
      width: 'full',
      gridTemplateColumns: '1fr',
      gap: 4,
      minHeight: 'screen',
      md: { gridTemplateColumns: '240px 1fr' },
    })}
  >
    <Sidebar entries={entries} />
    <ContentContainer title={title} headings={headings}>
      <header slot="header">
        <h1
          class={css({
            fontWeight: 'bold',
            fontSize: '4xl',
            mb: 2,
          })}
        >
          {title}
        </h1>
        {
          description && (
            <p class={css({ fontSize: 'xl', color: 'muted.foreground' })}>
              {description}
            </p>
          )
        }
        {
          badges && badges.length > 0 && (
            <div
              class={css({
                display: 'flex',
                gap: 8,
                alignItems: 'center',
                mt: 4,
              })}
            >
              {badges.map(({ name, url }) => (
                <Badge href={url}>{name}</Badge>
              ))}
            </div>
          )
        }
      </header>
      <slot />
      <NavigationFooter slot="footer" entries={entries} />
    </ContentContainer>
  </div>
</Layout>
